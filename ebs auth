CREATE OR REPLACE PACKAGE BODY APPS.EXAMPLE_APEX_EBS_UTIL
AS

    FUNCTION get_aop_url
        RETURN VARCHAR2
    IS
        l_ret   fnd_lookup_values.description%TYPE;
    BEGIN
        SELECT TRIM (description)
          INTO l_ret
          FROM apps.fnd_lookup_values flv, apps.fnd_application fa
         WHERE     fa.application_id = flv.view_application_id
               AND NVL (flv.start_date_active, SYSDATE - 1) < SYSDATE
               AND NVL (flv.end_date_active, SYSDATE + 1) > SYSDATE
               AND flv.enabled_flag = 'Y'
               AND fa.application_short_name = 'FND'
               AND lookup_type = 'EXAMPLE_APEX_AOP_URL'
               AND UPPER (lookup_code) =
                       (SELECT CASE
                                   WHEN LOWER (instance_name) LIKE
                                            '%apglprd%'
                                   THEN
                                       'PROD'
                                   ELSE
                                       'DEV'
                               END
                          FROM v$instance)
               AND language = USERENV ('LANG');

        RETURN l_ret;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN NULL;
    END;

    FUNCTION check_ebs_credentials
        RETURN BOOLEAN
    IS
        c_ebs             VARCHAR2 (240) := 'E-Business Suite';

        l_authorized      BOOLEAN;
        l_user_id         NUMBER;
        l_resp_id         NUMBER;
        l_resp_appl_id    NUMBER;
        l_sec_group_id    NUMBER;
        l_org_id          NUMBER;
        l_function_id     NUMBER;
        l_function_name   VARCHAR2 (240);
        l_time_out        NUMBER;
        l_ebs_url         VARCHAR2 (100);
        l_appl_name       VARCHAR2 (240);
        l_name            VARCHAR2 (1000);
        l_org_name        apps.hr_operating_units.name%TYPE;

        CURSOR get_apps_credentials
        IS
            SELECT iss.user_id,
                   iss.responsibility_id,
                   iss.responsibility_application_id,
                   iss.security_group_id,
                   iss.org_id,
                   iss.time_out,
                   isa.VALUE,
                   (SELECT function_name
                      FROM FND_FORM_FUNCTIONS
                     WHERE function_id = iss.function_id)
                       function_name,
                   isa.name,
                   (SELECT hou.name
                      FROM apps.hr_operating_units hou
                     WHERE hou.organization_id = iss.org_id) org_name
              FROM apps.icx_sessions iss, apps.icx_session_attributes isa
             WHERE     iss.session_id = icx_sec.getsessioncookie
                   AND isa.session_id = iss.session_id
                   AND isa.name IN ('_USERORSSWAPORTALURL', 'AUTHUSER');

        CURSOR get_appl_name (b_appl_id NUMBER)
        IS
            SELECT application_name
              FROM apps.fnd_application_tl
             WHERE application_id = b_appl_id AND language = USERENV ('LANG');
    BEGIN
        OPEN get_apps_credentials;

        FETCH get_apps_credentials
            INTO l_user_id,
                 l_resp_id,
                 l_resp_appl_id,
                 l_sec_group_id,
                 l_org_id,
                 l_time_out,
                 l_ebs_url,
                 l_function_name,
                 l_name,
                 l_org_name;

        --test_proc1('Authorization l_user_id :'||l_user_id||' - l_resp_id :'||l_resp_id||' - l_resp_appl_id :'||l_resp_appl_id ||'- l_name'||l_name||'l_function_name :'||l_function_name);

        INSERT INTO EXAMPLE_apex_log_errors (error_id,
                                         ERROR_CODE,
                                         error_message,
                                         created_by,
                                         creation_date,
                                         last_updated_by,
                                         last_update_date,
                                         module_name)
                 VALUES (
                            EXAMPLE_apex_log_errors_s.NEXTVAL,
                            'INVALID_LOGIN',
                               'l_user_id - '
                            || NVL (l_user_id, -1)
                            || 'l_resp_id - '
                            || NVL (l_resp_id, -1)
                            || 'l_resp_appl_id - '
                            || NVL (l_resp_appl_id, -1)
                            || 'l_function_name - '
                            || NVL (l_function_name, -1)
                            || 'l_sec_group_id -'
                            || l_sec_group_id
                            || 'l_org_id -'
                            || l_org_id
                            || ' l_ebs_url - '
                            || l_ebs_url
                            || ' l_org_name - '
                            || l_org_name,
                            l_user_id,
                            SYSDATE,
                            l_user_id,
                            SYSDATE,
                            'EXAMPLE_APEX_EBS_UTIL.check_ebs_credentials');


        IF get_apps_credentials%NOTFOUND
        THEN
            l_authorized := FALSE;
        ELSE
            l_authorized := TRUE;

            OPEN get_appl_name (l_resp_appl_id);

            FETCH get_appl_name INTO l_appl_name;

            IF get_appl_name%NOTFOUND
            THEN
                l_appl_name := c_ebs;
            END IF;

            CLOSE get_appl_name;

            APEX_UTIL.set_session_state ('EBS_USER_ID', TO_CHAR (l_user_id));
            APEX_UTIL.set_session_state ('EBS_RESP_ID', TO_CHAR (l_resp_id));
            APEX_UTIL.set_session_state ('EBS_RESP_APPL_ID',
                                         TO_CHAR (l_resp_appl_id));
            APEX_UTIL.set_session_state ('EBS_SEC_GROUP_ID',
                                         TO_CHAR (l_sec_group_id));
            APEX_UTIL.set_session_state ('EBS_ORG_ID', TO_CHAR (l_org_id));
            --       apex_util.set_session_state('EBS_TIME_OUT',TO_CHAR(l_time_out));
            APEX_UTIL.set_session_state ('EBS_URL', l_ebs_url);
            APEX_UTIL.set_session_state ('EBS_APPLICATION_NAME', l_appl_name);

            APEX_UTIL.set_session_max_idle_seconds (l_time_out * 60,'APPLICATION');

            IF v('APP_NAME') = 'ITC Collections' THEN
              APEX_UTIL.set_session_state ('EBS_ORG_NAME', l_org_name);
            END IF;

            set_apps_context;

            IF NOT FND_FUNCTION.TEST (l_function_name)
            THEN
                --dbms_output.put_line('l_function_name '||l_function_name);
                l_authorized := FALSE;

                BEGIN
                    INSERT INTO EXAMPLE_apex_log_errors (error_id,
                                                     ERROR_CODE,
                                                     error_message,
                                                     created_by,
                                                     creation_date,
                                                     last_updated_by,
                                                     last_update_date,
                                                     module_name)
                             VALUES (
                                        EXAMPLE_apex_log_errors_s.NEXTVAL,
                                        'INVALID_LOGIN',
                                           'l_user_id - '
                                        || NVL (l_user_id, -1)
                                        || 'l_resp_id - '
                                        || NVL (l_resp_id, -1)
                                        || 'l_resp_appl_id - '
                                        || NVL (l_resp_appl_id, -1)
                                        || 'l_function_name - '
                                        || NVL (l_function_name, -1),
                                        l_user_id,
                                        SYSDATE,
                                        l_user_id,
                                        SYSDATE,
                                        'EXAMPLE_APEX_EBS_UTIL.check_ebs_credentials');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;
            --test_proc1 ('check_ebs_credentials failed');
            ELSE
                --test_proc1 ('check_ebs_credentials success '||l_org_id);
                NULL;
            END IF;
        END IF;

        CLOSE get_apps_credentials;

        RETURN l_authorized;
    EXCEPTION
        WHEN OTHERS
        THEN
            IF get_apps_credentials%ISOPEN
            THEN
                CLOSE get_apps_credentials;
            END IF;

            RETURN FALSE;
    END;

    PROCEDURE apps_initialize (user_id             IN NUMBER,
                               resp_id             IN NUMBER,
                               resp_appl_id        IN NUMBER,
                               security_group_id   IN NUMBER DEFAULT 0,
                               server_id           IN NUMBER DEFAULT -1)
    IS
    BEGIN
        fnd_global.apps_initialize (user_id,
                                    resp_id,
                                    resp_appl_id,
                                    security_group_id,
                                    server_id);
    END;

    FUNCTION get_profile_value (name IN VARCHAR2)
        RETURN VARCHAR2
    IS
    BEGIN
        RETURN fnd_profile.VALUE (name);
    END;

    FUNCTION ebs_login (p_username VARCHAR2, p_password VARCHAR2)
        RETURN BOOLEAN
    IS
        l_valid_session   BOOLEAN;
        l_session_id      icx_sessions.session_id%TYPE;
        l_user_id         icx_sessions.user_id%TYPE;
        l_function_id     icx_sessions.function_id%TYPE;
        l_function_name   FND_FORM_FUNCTIONS.function_name%TYPE;

        CURSOR c_icx
        IS
            SELECT icxs.session_id,
                   user_id,
                   (SELECT function_name
                      FROM FND_FORM_FUNCTIONS
                     WHERE function_id = icxs.function_id)
                       function_name
              FROM icx_sessions icxs
             WHERE     icxs.session_id = icx_sec.getsessioncookie
                   AND   icxs.last_connect
                       + NUMTODSINTERVAL (icxs.time_out, 'MINUTE') > SYSDATE;
    BEGIN
        /*test_proc1 ('start authentication');*/
        l_valid_session := FALSE;

        OPEN c_icx;

        FETCH c_icx INTO l_session_id, l_user_id, l_function_name;

        l_valid_session := c_icx%FOUND;

        CLOSE c_icx;

        --test_proc1('Authentication l_user_id :'||l_user_id||' - l_session_id :'||l_session_id||' - l_function_name :'||l_function_name );
        IF NOT FND_FUNCTION.TEST (l_function_name)
        THEN
            /*test_proc1 ('ebs_login failed');*/
            BEGIN
                INSERT INTO EXAMPLE_apex_log_errors (error_id,
                                                 ERROR_CODE,
                                                 error_message,
                                                 created_by,
                                                 creation_date,
                                                 last_updated_by,
                                                 last_update_date,
                                                 module_name)
                         VALUES (
                                    EXAMPLE_apex_log_errors_s.NEXTVAL,
                                    'INVALID_LOGIN',
                                       'l_user_id - '
                                    || NVL (l_user_id, -1)
                                    || 'l_function_name - '
                                    || NVL (l_function_name, -1),
                                    l_user_id,
                                    SYSDATE,
                                    l_user_id,
                                    SYSDATE,
                                    'EXAMPLE_APEX_EBS_UTIL.ebs_login');
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            l_valid_session := FALSE;
        ELSE
            /*test_proc1 ('ebs_login sucess');*/
            NULL;
        END IF;

        RETURN l_valid_session;
    END ebs_login;

    PROCEDURE auto_login
    IS
        l_user_id             icx_sessions.user_id%TYPE;
        l_resp_id             icx_sessions.responsibility_id%TYPE;
        l_resp_appl_id        icx_sessions.responsibility_application_id%TYPE;
        l_security_group_id   icx_sessions.security_group_id%TYPE;
        l_user_name           fnd_user.user_name%TYPE;
        l_function_id         icx_sessions.function_id%TYPE;
        l_function_name       fnd_form_functions.function_name%TYPE;
        v_page_id             VARCHAR2 (10);
        l_org_id              apps.icx_sessions.org_id%TYPE;
        l_count               NUMBER := 0; --Added for FS-13814 - IC Sales Comp Application
        l_org_name            apps.hr_operating_units.name%type;

        -- get the context information from the icx session cookie.
        CURSOR c_session
        IS
            SELECT s.user_id,
                   s.responsibility_id,
                   s.responsibility_application_id,
                   s.security_group_id,
                   u.user_name,
                   s.function_id,
                   (SELECT function_name
                      FROM FND_FORM_FUNCTIONS
                     WHERE function_id = s.function_id)
                       function_name,
                   s.org_id,
                   (SELECT hou.name
                      FROM apps.hr_operating_units hou
                     WHERE hou.organization_id = s.org_id) org_name
              FROM icx_sessions s, fnd_user u
             WHERE     u.user_id = s.user_id
                   AND s.session_id = icx_sec.getsessioncookie
                   AND   s.last_connect
                       + NUMTODSINTERVAL (s.time_out, 'minute') > SYSDATE;
    BEGIN
        l_function_name := '';

        OPEN c_session;

        FETCH c_session
            INTO l_user_id,
                 l_resp_id,
                 l_resp_appl_id,
                 l_security_group_id,
                 l_user_name,
                 l_function_id,
                 l_function_name,
                 l_org_id,
                 l_org_name;

        CLOSE c_session;


        APEX_UTIL.set_session_state ('EBS_USER_ID', l_user_id);
        APEX_UTIL.set_session_state ('EBS_RESP_ID', l_resp_id);
        APEX_UTIL.set_session_state ('EBS_RESP_APPL_ID', l_resp_appl_id);
        APEX_UTIL.set_session_state ('EBS_SEC_GROUP_ID', l_security_group_id);
        APEX_UTIL.set_session_state ('EBS_ORG_ID', l_org_id);

        IF v('APP_NAME') = 'ITC Collections' THEN
           APEX_UTIL.set_session_state ('EBS_ORG_NAME', l_org_name);
        END IF;


        set_apps_context;                                   -- Explained below

        --Added below for FS-13814 - IC Sales Comp Application
        BEGIN
            SELECT COUNT (1)
              INTO l_count
              FROM (SELECT lookup_code
                      FROM fnd_lookup_values flv
                     WHERE     lookup_type = 'CNEXAMPLE_SALES_COMP_MENU_1'
                           AND enabled_flag = 'Y'
                           AND SYSDATE BETWEEN NVL (start_date_active,
                                                    SYSDATE - 1)
                                           AND NVL (end_date_active,
                                                    SYSDATE + 1)
                    UNION
                    SELECT lookup_code
                      FROM fnd_lookup_values flv
                     WHERE     lookup_type = 'CNEXAMPLE_SALES_COMP_MENU_2'
                           AND enabled_flag = 'Y'
                           AND SYSDATE BETWEEN NVL (start_date_active,
                                                    SYSDATE - 1)
                                           AND NVL (end_date_active,
                                                    SYSDATE + 1)
                    UNION
                    SELECT lookup_code
                      FROM fnd_lookup_values flv
                     WHERE     lookup_type = 'CNEXAMPLE_SALES_COMP_MENU_3'
                           AND enabled_flag = 'Y'
                           AND SYSDATE BETWEEN NVL (start_date_active,
                                                    SYSDATE - 1)
                                           AND NVL (end_date_active,
                                                    SYSDATE + 1)
                    UNION
                    SELECT lookup_code
                      FROM fnd_lookup_values flv
                     WHERE     lookup_type = 'CNEXAMPLE_SALES_COMP_MENU_4'
                           AND enabled_flag = 'Y'
                           AND SYSDATE BETWEEN NVL (start_date_active,
                                                    SYSDATE - 1)
                                           AND NVL (end_date_active,
                                                    SYSDATE + 1))
             WHERE lookup_code = l_function_name;

            IF l_count > 0
            THEN
                APEX_UTIL.set_session_state ('EBS_FUNCTION_NAME',
                                             l_function_name);
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        --Added above for FS-13814 - IC Sales Comp Application

        /*test_proc1 (
           'AUTO_LOGIN :' || l_function_id || 'user_id :' || l_user_id);*/

        -- call the standard apex login procedure to initialize a valid apex session.
        IF FND_FUNCTION.TEST (l_function_name)
        THEN
            BEGIN
                SELECT TO_CHAR (page_id)
                  INTO v_page_id
                  FROM APEX_APPLICATION_PAGES
                 WHERE     1 = 1
                       AND application_id = v ('app_id')
                       AND (   UPPER (Page_function) = 'LOGIN'
                            OR UPPER (Page_template) = 'LOGIN');
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_page_id := '101';
            END;

            wwv_flow_custom_auth_std.login (
                p_uname        => l_user_name,
                p_password     => '',
                p_session_id   => v ('app_session'),
                p_flow_page    => v ('app_id') || ':' || v_page_id);
        ELSE
            OWA_UTIL.redirect_url (EXAMPLE_APEX_EBS_UTIL.get_logout_url);

            BEGIN
                INSERT INTO EXAMPLE_apex_log_errors (error_id,
                                                 ERROR_CODE,
                                                 error_message,
                                                 created_by,
                                                 creation_date,
                                                 last_updated_by,
                                                 last_update_date,
                                                 module_name)
                         VALUES (
                                    EXAMPLE_apex_log_errors_s.NEXTVAL,
                                    'INVALID_LOGIN',
                                       'l_user_id - '
                                    || NVL (l_user_id, -1)
                                    || 'l_resp_id - '
                                    || NVL (l_resp_id, -1)
                                    || 'l_resp_appl_id - '
                                    || NVL (l_resp_appl_id, -1)
                                    || 'l_function_name - '
                                    || NVL (l_function_name, -1),
                                    l_user_id,
                                    SYSDATE,
                                    l_user_id,
                                    SYSDATE,
                                    'EXAMPLE_APEX_EBS_UTIL.auto_login');
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;
        END IF;
    END auto_login;

    PROCEDURE set_apps_context
    IS
    BEGIN
        fnd_global.apps_initialize (
            user_id             => v ('EBS_USER_ID'),
            resp_id             => v ('EBS_RESP_ID'),
            resp_appl_id        => v ('EBS_RESP_APPL_ID'),
            security_group_id   => v ('EBS_SEC_GROUP_ID'));
    END set_apps_context;

    FUNCTION get_logout_url
        RETURN VARCHAR2
    AS
    BEGIN
        RETURN    fnd_profile.VALUE ('APPS_FRAMEWORK_AGENT')
               || '/OA_HTML/OALogout.jsp?menu=Y';
    END;

    FUNCTION get_apex_url
        RETURN VARCHAR2
    AS
    BEGIN
        RETURN fnd_profile.VALUE ('FND_APEX_URL');
    END;

    FUNCTION get_login_url
        RETURN VARCHAR2
    AS
    BEGIN
        RETURN    fnd_profile.VALUE ('APPS_FRAMEWORK_AGENT')
               || '/OA_HTML/OA.jsp?OAFunc=OAHOMEPAGE';
    END;

    FUNCTION get_quarter_details (p_year      VARCHAR2,
                                  p_period    VARCHAR2 DEFAULT NULL)
        RETURN charset_t
        PIPELINED
    AS
        charset_type_rec1   charset_type;
        is_current_year     VARCHAR2 (1);

        CURSOR quarter_dtls
        IS
            SELECT ap.period_name,
                   ap.start_date,
                   ap.end_date,
                   ap.period_year,
                   ap.period_num,
                   CASE
                       WHEN FLOOR ( (ap.period_num - 0.1) / 3) = 0 THEN 'Q1'
                       WHEN FLOOR ( (ap.period_num - 0.1) / 3) = 1 THEN 'Q2'
                       WHEN FLOOR ( (ap.period_num - 0.1) / 3) = 2 THEN 'Q3'
                       WHEN FLOOR ( (ap.period_num - 0.1) / 3) >= 3 THEN 'Q4'
                   END
                       Quarter,
                   NULL current_period,
                   NULL current_Quarter
              FROM gl_periods ap
             WHERE     ap.period_type = '1'
                   AND ap.period_set_name = 'ESCAL'
                   AND ap.period_year IN
                           (SELECT *
                              FROM TABLE (apex_string.split (p_year, ':')))
                   AND ap.period_name IN
                           (SELECT *
                              FROM TABLE (apex_string.split (p_period, ':')));
    BEGIN
        FOR rec IN quarter_dtls
        LOOP
            charset_type_rec1.period_name := rec.period_name;
            charset_type_rec1.start_Date := rec.start_Date;
            charset_type_rec1.end_date := rec.end_date;
            charset_type_rec1.period_year := rec.period_year;
            charset_type_rec1.period_num := rec.period_num;
            charset_type_rec1.quarter := rec.quarter;
            charset_type_rec1.current_period := rec.current_period;
            charset_type_rec1.current_quarter := rec.current_quarter;

            PIPE ROW (charset_type_rec1);
        END LOOP;

        RETURN;
    END get_quarter_details;

    FUNCTION get_quarter_periods (p_year VARCHAR2, p_quarter VARCHAR2)
        RETURN VARCHAR2
    IS
        l_year_sub         VARCHAR2 (2);
        v_return_periods   VARCHAR2 (100);
    BEGIN
        l_year_sub := SUBSTR (p_year, 3, 2);

        SELECT CASE
                   WHEN p_quarter = 'Q1'
                   THEN
                          '01-'
                       || l_year_sub
                       || 'XXXXX'
                       || '02-'
                       || l_year_sub
                       || 'XXXXX'
                       || '03-'
                       || l_year_sub
                       || 'XXXXX'
                   WHEN p_quarter = 'Q2'
                   THEN
                          '04-'
                       || l_year_sub
                       || 'XXXXX'
                       || '05-'
                       || l_year_sub
                       || 'XXXXX'
                       || '06-'
                       || l_year_sub
                       || 'XXXXX'
                   WHEN p_quarter = 'Q3'
                   THEN
                          '07-'
                       || l_year_sub
                       || 'XXXXX'
                       || '08-'
                       || l_year_sub
                       || 'XXXXX'
                       || '09-'
                       || l_year_sub
                       || 'XXXXX'
                   WHEN p_quarter = 'Q4'
                   THEN
                          '10-'
                       || l_year_sub
                       || 'XXXXX'
                       || '11-'
                       || l_year_sub
                       || 'XXXXX'
                       || '12-'
                       || l_year_sub
                       || 'XXXXX'
                       || '13-'
                       || l_year_sub
                       || 'XXXXX'
               END
          INTO v_return_periods
          FROM DUAL;

        RETURN v_return_periods;
    END;


    FUNCTION check_ebs_session (
        p_preferred_username    IN VARCHAR2,
        p_resp                  IN VARCHAR2,
        p_resp_appl             IN VARCHAR2,
        p_security              IN VARCHAR2 DEFAULT NULL,
        p_org_id                IN VARCHAR2 DEFAULT NULL,
        p_function_name         IN VARCHAR2,
        p_bypass_verification   IN VARCHAR2 DEFAULT 'N')
        RETURN BOOLEAN
    IS
        l_user_id     NUMBER;

        l_org_id      NUMBER := p_org_id;
        l_time_out    NUMBER := 60;
        l_ebs_url     VARCHAR2 (100) := EXAMPLE_apex_ebs_util.get_login_url;
        l_resp        NUMBER;
        l_resp_appl   NUMBER;
        l_suc_cnt     NUMBER := 0;
    BEGIN
        --dbms_output.put_line('Start1' );

        BEGIN
            --dbms_output.put_line('Start1-2' );
            --insert into apps.xx_apex_test values('p_preferred_username- '||p_preferred_username);
            COMMIT;
        EXCEPTION
            WHEN OTHERS
            THEN
                --dbms_output.put_line('Start1-3' );
                NULL;
        --insert into apps.xx_apex_test values('ERROR');
        END;

        --dbms_output.put_line('Start2' );

        BEGIN
            --dbms_output.put_line('Start2/1' );

            SELECT fu.user_id
              INTO l_user_id
              FROM apex_per_all_people_f ppf, apps.apex_fnd_user fu
             WHERE     1 = 1
                   AND ppf.person_id = fu.employee_id(+)
                   AND NVL (ppf.effective_start_date, SYSDATE - 1) < SYSDATE
                   AND NVL (ppf.effective_end_date, SYSDATE + 1) > SYSDATE
                   AND ppf.attribute27 IS NOT NULL
                   AND NVL (fu.start_date, SYSDATE - 1) < SYSDATE
                   AND NVL (fu.end_date, SYSDATE + 1) > SYSDATE
                   AND (   LOWER (ppf.attribute27) =
                               LOWER (p_preferred_username)
                        OR LOWER (ppf.email_address) =
                               LOWER (p_preferred_username));
        EXCEPTION
            WHEN OTHERS
            THEN
                --dbms_output.put_line('Start2-34' );
                l_user_id := -1;
        END;

        --dbms_output.put_line('Start3 - '||l_user_id );


        IF NVL (l_user_id, -1) < 0
        THEN
            BEGIN
                INSERT INTO EXAMPLE_apex_log_errors (error_id,
                                                 ERROR_CODE,
                                                 error_message,
                                                 created_by,
                                                 creation_date,
                                                 last_updated_by,
                                                 last_update_date,
                                                 module_name)
                         VALUES (
                                    EXAMPLE_apex_log_errors_s.NEXTVAL,
                                    'LOGIN',
                                       'l_user_name - '
                                    || NVL (p_preferred_username, -1),
                                    -1,
                                    SYSDATE,
                                    -1,
                                    SYSDATE,
                                    'TaxExemption.checkAccess');
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;
        END IF;

        --dbms_output.put_line('Start4 - '||p_bypass_verification );


        IF p_bypass_verification = 'Y'
        THEN
            --dbms_output.put_line('p_bypass_verification - '||p_bypass_verification );
            /*insert into xx_apex_test values('l_user_id-'||l_user_id);
            insert into xx_apex_test values('EBS_RESP_ID-'||p_resp);
            insert into xx_apex_test values('EBS_RESP_APPL_ID-'||p_resp_appl);
            insert into xx_apex_test values('EBS_SEC_GROUP_ID-'||p_security);
            insert into xx_apex_test values('-------------------- ');
            insert into xx_apex_test values('EBS_USER_ID-'||NVL(v ('EBS_USER_ID'),-1));*/

            COMMIT;

            BEGIN
                APEX_UTIL.set_session_state ('EBS_USER_ID',
                                             TO_CHAR (l_user_id));
                APEX_UTIL.set_session_state ('EBS_RESP_ID', TO_CHAR (p_resp));
                APEX_UTIL.set_session_state ('EBS_RESP_APPL_ID',
                                             TO_CHAR (p_resp_appl));
                APEX_UTIL.set_session_state ('EBS_SEC_GROUP_ID',
                                             TO_CHAR (p_security));
                APEX_UTIL.set_session_state ('EBS_ORG_ID',
                                             TO_CHAR (l_org_id));
                APEX_UTIL.set_session_state ('EBS_URL', l_ebs_url);
                APEX_UTIL.set_session_max_idle_seconds (l_time_out * 60,
                                                        'APPLICATION');
            EXCEPTION
                WHEN OTHERS
                THEN
                    --dbms_output.put_line('ORASSS '||SQLERRM);
                    NULL;
            END;


            BEGIN
                set_apps_context;
            EXCEPTION
                WHEN OTHERS
                THEN
                    --dbms_output.put_line(SQLERRM);
                    NULL;
            END;

            --insert into xx_apex_test values('EBS_USER_ID12-'||NVL(v ('EBS_USER_ID'),-1));

            COMMIT;

            RETURN TRUE;
        END IF;

        BEGIN
            SELECT 1,
                   NVL (p_resp, rtl.responsibility_id),
                   NVL (p_resp_appl, rtl.application_id)
              INTO l_suc_cnt, l_resp, l_resp_appl
              FROM fnd_compiled_menu_functions  cmf,
                   fnd_form_functions           ff,
                   fnd_form_functions_tl        ffl,
                   fnd_responsibility           r,
                   fnd_responsibility_vl        rtl,
                   fnd_application_all_view     faa,
                   fnd_user_resp_groups_direct  furg,
                   fnd_user                     fu
             WHERE     cmf.function_id = ff.function_id
                   AND r.menu_id = cmf.menu_id
                   AND rtl.responsibility_id = r.responsibility_id
                   AND cmf.grant_flag = 'Y'
                   AND ff.function_id = ffl.function_id
                   AND faa.application_id(+) = r.application_id
                   AND furg.user_id = fu.user_id
                   AND furg.responsibility_id = rtl.responsibility_id
                   AND ff.function_name = p_function_name
                   AND fu.user_id = l_user_id
                   AND NVL (fu.start_date, SYSDATE - 1) <= SYSDATE
                   AND NVL (fu.end_date, SYSDATE + 1) >= SYSDATE
                   AND NVL (r.start_date, SYSDATE - 1) <= SYSDATE
                   AND NVL (r.end_date, SYSDATE + 1) >= SYSDATE
                   AND NVL (rtl.start_date, SYSDATE - 1) <= SYSDATE
                   AND NVL (rtl.end_date, SYSDATE + 1) >= SYSDATE
                   AND NVL (furg.start_date, SYSDATE - 1) <= SYSDATE
                   AND NVL (furg.end_date, SYSDATE + 1) >= SYSDATE
                   AND ROWNUM < 2;


            APEX_UTIL.set_session_state ('EBS_USER_ID', TO_CHAR (l_user_id));
            APEX_UTIL.set_session_state ('EBS_RESP_ID', TO_CHAR (l_resp));
            APEX_UTIL.set_session_state ('EBS_RESP_APPL_ID',
                                         TO_CHAR (l_resp_appl));
            APEX_UTIL.set_session_state ('EBS_SEC_GROUP_ID',
                                         TO_CHAR (p_security));
            APEX_UTIL.set_session_state ('EBS_ORG_ID', TO_CHAR (l_org_id));
            APEX_UTIL.set_session_state ('EBS_URL', l_ebs_url);
            APEX_UTIL.set_session_max_idle_seconds (l_time_out * 60,
                                                    'APPLICATION');
            set_apps_context;

            RETURN TRUE;
        EXCEPTION
            WHEN OTHERS
            THEN
                RETURN FALSE;
        END;

        COMMIT;
    EXCEPTION
        WHEN OTHERS
        THEN
            --dbms_output.put_line('error1 '||sqlerrm);
            RETURN FALSE;
    END check_ebs_session;

    FUNCTION get_ir_query (p_application_id   IN NUMBER,
                           p_page_id          IN NUMBER,
                           p_static_id        IN VARCHAR2)
        RETURN CLOB
    IS
        l_report      apex_ir.t_report;
        l_query       VARCHAR2 (32767);
        l_region_id   NUMBER;
    BEGIN
        SELECT region_id
          INTO l_region_id
          FROM apex_application_page_regions a
         WHERE     application_id = p_application_id
               AND page_id = p_page_id
               AND static_id = p_static_id
               AND source_type = 'Interactive Report';


        l_report :=
            APEX_IR.GET_REPORT (p_page_id     => p_page_id,
                                p_region_id   => l_region_id);
        l_query := l_report.sql_query;



        /*sys.HTP.p ('Statement = ' || l_report.sql_query);*/

        /* FOR i IN 1 .. l_report.binds.COUNT
          LOOP

             IF l_report.binds (i).VALUE IS NOT NULL THEN
                l_query := replace(l_query,':'||l_report.binds (i).name, ''''||l_report.binds (i).VALUE||'''');

             END IF;

          END LOOP;*/

        RETURN l_query;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN l_query;
    END;


    PROCEDURE get_data_from_query (p_query IN CLOB, P_data OUT CLOB)
    IS
        l_Clob        CLOB;
        l_cursor      INT;
        l_sql         LONG := p_query;            --replace(p_query,'"','''');
        l_col_cnt     INT;
        l_desc_tab    DBMS_SQL.desc_tab;
        l_value       VARCHAR2 (1000);
        l_status      INT;
        l_result      VARCHAR2 (32767);
        l_delimiter   VARCHAR2 (1) := ',';
    BEGIN
        DBMS_LOB.Createtemporary (Lob_Loc   => l_Clob,
                                  Cache     => TRUE,
                                  Dur       => DBMS_LOB.Call);

        l_cursor := DBMS_SQL.open_cursor;
        DBMS_SQL.parse (l_cursor, l_sql, DBMS_SQL.native);
        DBMS_SQL.describe_columns (l_cursor, l_col_cnt, l_desc_tab);

        FOR i IN 1 .. l_col_cnt
        LOOP
            DBMS_SQL.define_column (l_cursor,
                                    i,
                                    l_value,
                                    1000);
        END LOOP;

        l_status := DBMS_SQL.execute (l_cursor);

        WHILE (DBMS_SQL.fetch_rows (l_cursor) > 0)
        LOOP
            l_result := NULL;

            FOR i IN 1 .. l_col_cnt
            LOOP
                DBMS_SQL.COLUMN_VALUE (l_cursor, i, l_value);
                l_result := l_result || l_value || l_delimiter;
            END LOOP;

            l_result := TRIM (l_delimiter FROM l_result);
            l_Clob := l_Clob || l_result || CHR (10);
        END LOOP;

        DBMS_SQL.close_cursor (l_cursor);

        P_data := l_Clob;
    EXCEPTION
        WHEN OTHERS
        THEN
            P_data :=
                   'Query : '
                || p_query
                || CHR (10)
                || '||EXCEPTION: '
                || SQLERRM;
    -- P_data := 'P'||p_query;
    END;

    PROCEDURE init_org (p_org_id NUMBER)
    IS
    BEGIN
        apps.mo_global.set_policy_context ('S', p_org_id);
    EXCEPTION
        WHEN OTHERS
        THEN
            NULL;
    END;

    FUNCTION has_user_access_func (p_user_id          NUMBER,
                                   p_function_name    VARCHAR2)
        RETURN VARCHAR2
    IS
        l_ret   VARCHAR2 (1) := 'N';
    BEGIN
        WITH main_resps
             AS (SELECT frt.responsibility_id, frt.application_id
                   FROM fnd_user_resp_groups_direct  furg,
                        apps.fnd_user                fu,
                        apps.fnd_responsibility_tl   frt,
                        apps.fnd_responsibility      fr,
                        apps.fnd_application_tl      fat,
                        apps.fnd_application         fa
                  WHERE     furg.user_id = fu.user_id
                        AND fu.user_ID = p_user_id
                        AND furg.responsibility_id = frt.responsibility_id
                        AND fr.responsibility_id = frt.responsibility_id
                        AND NVL (FU.END_DATE, SYSDATE + 1) > SYSDATE
                        AND NVL (furg.END_DATE, SYSDATE + 1) > SYSDATE
                        AND FA.APPLICATION_ID = FAT.APPLICATION_ID
                        AND FR.APPLICATION_ID = FAT.APPLICATION_ID
                        AND FR.APPLICATION_ID = FRT.APPLICATION_ID
                        AND FRT.APPLICATION_ID = FAT.APPLICATION_ID
                        AND frt.APPLICATION_ID =
                                furg.responsibility_APPLICATION_ID
                        AND FAT.language = USERENV ('LANG')
                        AND FRT.language = USERENV ('LANG'))
        SELECT 'Y'
          INTO l_ret
          FROM apps.fnd_responsibility_vl r, apps.fnd_form_functions f
         WHERE     f.function_name IN
                       (SELECT *
                          FROM TABLE (
                                   apex_string.split (p_function_name, ',')))
               AND (r.responsibility_id, r.application_id) IN
                       (SELECT responsibility_id, application_id
                          FROM main_resps)
               AND r.menu_id IN
                       (    SELECT me.menu_id
                              FROM apps.fnd_menu_entries me
                        START WITH me.function_id = f.function_id
                        CONNECT BY PRIOR me.menu_id = me.sub_menu_id)
               AND r.menu_id NOT IN
                       (SELECT frf.action_id
                          FROM apps.fnd_resp_functions frf
                         WHERE     frf.action_id = r.menu_id
                               AND frf.rule_type = 'M')
               AND f.function_id NOT IN
                       (SELECT frf.action_id
                          FROM apps.fnd_resp_functions frf
                         WHERE     frf.action_id = f.function_id
                               AND frf.rule_type = 'F')
               AND ROWNUM < 2;

        RETURN l_ret;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN 'N';
    END has_user_access_func;


    FUNCTION has_user_access_func2 (p_user_id          NUMBER,
                                    p_function_name    VARCHAR2,
                                    p_org_id           NUMBER)
        RETURN VARCHAR2
    IS
        l_ret   VARCHAR2 (1) := 'N';
    BEGIN
        --   RETURN 'Y';--testing
        WITH main_resps
             AS (SELECT frt.responsibility_id, frt.application_id, menu_id
                   FROM fnd_user_resp_groups_direct     furg,
                        apps.fnd_user                   fu,
                        apps.fnd_responsibility_tl      frt,
                        apps.fnd_responsibility_vl      fr,
                        apps.fnd_application_tl         fat,
                        apps.fnd_application            fa,
                        apps.fnd_profile_options_vl     fpo,
                        apps.fnd_profile_option_values  fpov
                  WHERE     furg.user_id = fu.user_id
                        AND fu.user_ID = p_user_id
                        AND furg.responsibility_id = frt.responsibility_id
                        AND fr.responsibility_id = frt.responsibility_id
                        AND NVL (fu.end_date, SYSDATE + 1) > SYSDATE
                        AND NVL (furg.end_date, SYSDATE + 1) > SYSDATE
                        AND fa.application_id = fat.application_id
                        AND fr.application_id = fat.application_id
                        AND fr.application_id = frt.application_id
                        AND frt.application_id = fat.application_id
                        AND frt.application_id =
                                furg.responsibility_application_id
                        AND FAT.language = USERENV ('LANG')
                        AND FRT.language = USERENV ('LANG')
                        AND fpo.profile_option_id = fpov.profile_option_id
                        AND fpo.user_profile_option_name =
                                'MO: Operating Unit'
                        AND fr.responsibility_id = fpov.level_value
                        AND fpov.profile_option_value = TO_CHAR (p_org_id) --TO_CHAR('104') --p_org_id
                                                                          )
             SELECT 'Y'
               INTO l_ret
               FROM                            --apps.fnd_responsibility_vl r,
                   main_resps r, apps.fnd_form_functions f
              WHERE     f.function_name = p_function_name /*IN
                             (SELECT *
                                FROM TABLE (apex_string.split (p_function_name, ',')))*/
                    AND (r.responsibility_id, r.application_id) IN
                            (SELECT responsibility_id, application_id
                               FROM main_resps
                              WHERE     r.responsibility_id =
                                            main_resps.responsibility_id
                                    AND r.application_id =
                                            main_resps.application_id)
                    AND r.menu_id IN
                            (    SELECT me.menu_id
                                   FROM apps.fnd_menu_entries me
                             START WITH me.function_id = f.function_id
                             CONNECT BY PRIOR me.menu_id = me.sub_menu_id)
                    AND r.menu_id NOT IN
                            (SELECT frf.action_id
                               FROM apps.fnd_resp_functions frf
                              WHERE     frf.action_id = r.menu_id
                                    AND frf.rule_type = 'M')
                    AND f.function_id NOT IN
                            (SELECT frf.action_id
                               FROM apps.fnd_resp_functions frf
                              WHERE     frf.action_id = f.function_id
                                    AND frf.rule_type = 'F')
        FETCH FIRST 1 ROW ONLY;

        RETURN l_ret;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN 'N';
    END has_user_access_func2;

    PROCEDURE period_details (p_org_id            IN     NUMBER,
                              p_application       IN     VARCHAR2 DEFAULT 'GL',
                              p_frequency         IN     VARCHAR2,
                              p_period_name_in    IN     VARCHAR2,
                              p_start_date_out       OUT DATE,
                              p_end_date_out         OUT DATE,
                              p_period_year_out      OUT NUMBER,
                              p_period_name_out      OUT VARCHAR2,
                              p_period_num_out       OUT VARCHAR2,
                              p_period_set_name      OUT VARCHAR2,
                              p_acct_period_type     OUT VARCHAR2)
    IS
      lv_period_set_name  apps.gl_ledgers.period_set_name%TYPE;
      lv_acct_period_type apps.gl_ledgers.accounted_period_type%TYPE;
    BEGIN

        IF p_application = 'GL' AND p_org_id IS NOT NULL
        THEN

            BEGIN
               SELECT --ou.name operating_unit_name,
                      --gll.name ledger_name,
                      --gll.currency_code,
                      gll.period_set_name,
                      gll.accounted_period_type
                 INTO lv_period_set_name
                    , lv_acct_period_type
                 FROM apps.hr_operating_units            hro,
                      apps.xle_entity_profiles           xfi,
                      --apps.hr_all_organization_units_tl  ou,
                      --apps.hr_organization_units         hou,
                      apps.gl_ledgers                    gll
                WHERE xfi.legal_entity_id = hro.default_legal_context_id
                  --  AND hou.organization_id = hro.organization_id
                  --  AND ou.organization_id = hro.organization_id
                  --  AND ou.language = USERENV ('LANG')
                  AND hro.set_of_books_id = gll.ledger_id
                  AND hro.organization_id = p_org_id;

            EXCEPTION
              WHEN OTHERS THEN
                 lv_period_set_name := NULL;
                 lv_acct_period_type := NULL;
            END;

            p_period_set_name  := lv_period_set_name;
            p_acct_period_type := lv_acct_period_type;
            apps.fnd_file.put_line (apps.fnd_file.LOG, 'p_period_set_name          : ' || p_period_set_name);
            apps.fnd_file.put_line (apps.fnd_file.LOG, 'p_acct_period_type         : ' || p_acct_period_type);
            apps.fnd_file.put_line (apps.fnd_file.LOG, 'p_frequency                : ' || p_frequency);

            IF lv_period_set_name IS NOT NULL AND lv_acct_period_type IS NOT NULL THEN
               IF p_frequency = 'MTD' THEN
                  --MTD Current Period
                  IF (p_period_name_in IS NULL) THEN
                     BEGIN
                        SELECT gp.start_date
                             , gp.end_date
                             , gp.period_year
                             , gp.period_name
                             , gp.period_num
                          INTO p_start_date_out
                             , p_end_date_out
                             , p_period_year_out
                             , p_period_name_out
                             , p_period_num_out
                          FROM apps.gl_periods gp
                         WHERE gp.period_set_name = lv_period_set_name
                           AND gp.period_type = lv_acct_period_type
                           AND gp.adjustment_period_flag = 'N'
                           AND TRUNC(SYSDATE) BETWEEN gp.start_date AND gp.end_date;
                     END;
                  --MTD Other Period
                  ELSIF     p_period_name_in IS NOT NULL THEN
                     BEGIN
                        SELECT gp.start_date
                             , gp.end_date
                             , gp.period_year
                             , gp.period_name
                             , gp.period_num
                          INTO p_start_date_out
                             , p_end_date_out
                             , p_period_year_out
                             , p_period_name_out
                             , p_period_num_out
                          FROM apps.gl_periods gp
                         WHERE gp.period_set_name = lv_period_set_name
                           AND gp.period_type = lv_acct_period_type
                           AND gp.adjustment_period_flag = 'N'
                           AND gp.period_name = p_period_name_in;
                     END;
                  END IF;

               END IF;

               IF p_frequency = 'YTD' THEN
                  --'YTD' Current Year only
                  IF p_period_name_in IS NULL THEN
                     BEGIN
                        SELECT MIN(gp.start_date)
                             , MAX(gp.end_date)
                             , MAX(gp.period_year)
                             , MAX(gp.period_name)
                             , MAX(gp.period_num)
                          INTO p_start_date_out
                             , p_end_date_out
                             , p_period_year_out
                             , p_period_name_out
                             , p_period_num_out
                          FROM apps.gl_periods gp
                         WHERE gp.period_set_name = lv_period_set_name
                           AND gp.period_type = lv_acct_period_type
                           AND gp.adjustment_period_flag = 'N'
                           AND gp.period_year = (SELECT TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')) FROM DUAL);
                     END;
                  --YTD Other Period
                  ELSIF  p_period_name_in IS NOT NULL THEN
                     BEGIN
                        SELECT MIN(gp.start_date)
                             , MAX(gp.end_date)
                             , MAX(gp.period_year)
                             , MAX(gp.period_name)
                             , MAX(gp.period_num)
                          INTO p_start_date_out
                             , p_end_date_out
                             , p_period_year_out
                             , p_period_name_out
                             , p_period_num_out
                          FROM apps.gl_periods gp
                         WHERE gp.period_set_name = lv_period_set_name
                           AND gp.period_type = lv_acct_period_type
                           AND gp.adjustment_period_flag = 'N'
                           AND gp.period_year = p_period_name_in;
                     END;
                  END IF;

               END IF;

               IF p_frequency = 'QTD' THEN
                  --QTD Current Period
                  IF (p_period_name_in IS NULL) THEN
                     BEGIN
                        SELECT gp.start_date
                             , gp.end_date
                             , gp.period_year
                             , gp.period_name
                             , gp.period_num
                          INTO p_start_date_out
                             , p_end_date_out
                             , p_period_year_out
                             , p_period_name_out
                             , p_period_num_out
                          FROM apps.gl_periods gp
                         WHERE gp.period_set_name = lv_period_set_name
                          -- AND gp.period_type = lv_acct_period_type
                           AND gp.adjustment_period_flag = 'N'
                           AND gp.period_type = 'Quarter'
                           AND TRUNC(SYSDATE) BETWEEN gp.start_date AND gp.end_date;
                     END;
                  --QTD Other Period
                  ELSIF     p_period_name_in IS NOT NULL THEN
                     BEGIN
                        SELECT gp.start_date
                             , gp.end_date
                             , gp.period_year
                             , gp.period_name
                             , gp.period_num
                          INTO p_start_date_out
                             , p_end_date_out
                             , p_period_year_out
                             , p_period_name_out
                             , p_period_num_out
                          FROM apps.gl_periods gp
                         WHERE gp.period_set_name = lv_period_set_name
                          -- AND gp.period_type = lv_acct_period_type
                           AND gp.adjustment_period_flag = 'N'
                           AND gp.period_type = 'Quarter'
                           AND gp.period_name = p_period_name_in;

                     END;
                  END IF;

               END IF;


               IF p_frequency = 'WOW' THEN
                  --MTD Current Period
                  IF (p_period_name_in IS NULL ) THEN
                     BEGIN
                        SELECT gp.start_date
                             , gp.end_date
                             , gp.period_year
                             , gp.period_name
                             , gp.period_num
                          INTO p_start_date_out
                             , p_end_date_out
                             , p_period_year_out
                             , p_period_name_out
                             , p_period_num_out
                          FROM apps.gl_periods gp
                         WHERE gp.period_set_name = lv_period_set_name
                           --AND gp.period_type = lv_acct_period_type
                           AND gp.period_type = '26'
                           AND gp.adjustment_period_flag = 'N'
                           AND TRUNC(SYSDATE) BETWEEN gp.start_date AND gp.end_date
                           AND gp.period_name LIKE 'W%';
                     END;
                  --MTD Other Period
                  ELSIF     p_period_name_in IS NOT NULL THEN
                     BEGIN
                        SELECT gp.start_date
                             , gp.end_date
                             , gp.period_year
                             , gp.period_name
                             , gp.period_num
                          INTO p_start_date_out
                             , p_end_date_out
                             , p_period_year_out
                             , p_period_name_out
                             , p_period_num_out
                          FROM apps.gl_periods gp
                         WHERE gp.period_set_name = lv_period_set_name
                           AND gp.period_type = lv_acct_period_type
                           AND gp.adjustment_period_flag = 'N'
                           AND gp.period_name = p_period_name_in
                           AND gp.period_type = '26'
                           AND gp.period_name LIKE 'W%';
                     END;
                  END IF;

               END IF;

            END IF;

        ELSE
            p_start_date_out := NULL;
            p_end_date_out := NULL;

        END IF;

    EXCEPTION
        WHEN OTHERS
        THEN
            p_start_date_out := NULL;
            p_end_date_out := NULL;

    END period_details;

   PROCEDURE set_apex_currency_symb(p_org_name   VARCHAR2,
                                    p_curr_symb  OUT VARCHAR,
                                    p_curr_code  OUT VARCHAR)
   IS
    -- l_currency_symb  VARCHAR2(100);
   --  l_currency_code  VARCHAR2(100);
   BEGIN

      SELECT flv.description,
             flv.tag
        INTO p_curr_symb
           , p_curr_code
        FROM apps.fnd_lookup_values flv, apps.fnd_application fa
       WHERE     fa.application_id = flv.view_application_id
                   AND NVL (flv.start_date_active, SYSDATE - 1) < SYSDATE
                   AND NVL (flv.end_date_active, SYSDATE + 1) > SYSDATE
                   AND flv.enabled_flag = 'Y'
                   AND flv.lookup_code = p_org_name || '_SYMB'
                   AND fa.application_short_name = 'FND'
                   AND flv.lookup_type = 'EXAMPLE_IEX_CONSTANT_VALUES'
                   AND flv.language = USERENV ('LANG');

     EXECUTE IMMEDIATE 'alter session set nls_currency='''|| p_curr_symb || '''';

   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;


END EXAMPLE_APEX_EBS_UTIL;
/

